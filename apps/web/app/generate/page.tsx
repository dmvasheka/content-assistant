"use client";
import { useState } from "react";
import ReactMarkdown from 'react-markdown';
import { GenerateResponse, GenerateRequest, Citation } from '../../../../packages/shared';

/**
 * –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –° RAG-–ü–û–î–î–ï–†–ñ–ö–û–ô
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:
 * 1. –ù–æ–≤—ã–π endpoint /generate (–≤–º–µ—Å—Ç–æ /articles/generate)
 * 2. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Markdown —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
 * 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
 * 4. TypeScript —Ç–∏–ø–∏–∑–∞—Ü–∏—è
 * 5. –£–ª—É—á—à–µ–Ω–Ω—ã–π UX —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏
 */

export default function GeneratePage() {
    // ===== –°–û–°–¢–û–Ø–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–ê =====
    const [topic, setTopic] = useState<string>("");
    const [loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState<string | null>(null);
    
    // –ò–∑–º–µ–Ω–µ–Ω–æ: –≤–º–µ—Å—Ç–æ generic 'any' –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    const [generateResult, setGenerateResult] = useState<GenerateResponse | null>(null);

    /**
     * –§–£–ù–ö–¶–ò–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –° RAG-–ü–û–î–î–ï–†–ñ–ö–û–ô
     * 
     * –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:
     * - Endpoint: /articles/generate ‚Üí /generate
     * - –¢–∏–ø–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
     * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
     * - –°–±—Ä–æ—Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—à–∏–±–æ–∫
     */
    async function handleGenerate() {
        if (!topic.trim()) {
            setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Å—Ç–∞—Ç—å–∏");
            return;
        }

        setLoading(true);
        setError(null);
        setGenerateResult(null);

        try {
            // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–≤–æ–º—É RAG-endpoint
            const requestBody: GenerateRequest = { topic };
            
            const response = await fetch("http://localhost:3001/generate", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(requestBody),
            });

            if (!response.ok) {
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
            }

            // –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            const data: GenerateResponse = await response.json();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            if (!data.draft) {
                throw new Error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —á–µ—Ä–Ω–æ–≤–∏–∫");
            }

            setGenerateResult(data);
            
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", err);
            setError(err instanceof Error ? err.message : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
        } finally {
            setLoading(false);
        }
    }

    /**
     * –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–Ø ENTER
     * UX —É–ª—É—á—à–µ–Ω–∏–µ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ Enter
     */
    const handleKeyPress = (e: React.KeyboardEvent) => {
        if (e.key === 'Enter' && !loading) {
            handleGenerate();
        }
    };

    return (
        <div className="max-w-4xl mx-auto py-10 px-4">
            {/* ===== –ó–ê–ì–û–õ–û–í–û–ö –° –û–ü–ò–°–ê–ù–ò–ï–ú RAG ===== */}
            <div className="mb-8">
                <h1 className="text-3xl font-bold mb-2">AI Content Assistant</h1>
                <p className="text-gray-600">
                    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ ‚Ä¢ RAG-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è ‚Ä¢ –ê–Ω—Ç–∏-–≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏
                </p>
            </div>

            {/* ===== –§–û–†–ú–ê –í–í–û–î–ê –¢–ï–ú–´ ===== */}
            <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
                <label htmlFor="topic" className="block text-sm font-medium text-gray-700 mb-2">
                    –¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏
                </label>
                <div className="flex gap-3">
                    <input
                        id="topic"
                        type="text"
                        value={topic}
                        onChange={(e) => setTopic(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ"
                        className="flex-1 border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        disabled={loading}
                    />
                    <button
                        onClick={handleGenerate}
                        disabled={loading || !topic.trim()}
                        className="bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white px-6 py-3 rounded-lg font-medium transition-colors"
                    >
                        {loading ? "üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è..." : "üöÄ –°–æ–∑–¥–∞—Ç—å –¥—Ä–∞—Ñ—Ç"}
                    </button>
                </div>
                
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–æ–≥–¥–∞ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ */}
                {!topic.trim() && !loading && (
                    <p className="text-sm text-gray-500 mt-2">
                        üí° –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –∏ –ò–ò –Ω–∞–π–¥–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
                    </p>
                )}
            </div>

            {/* ===== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===== */}
            {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                    <div className="flex">
                        <span className="text-red-400 mr-2">‚ö†Ô∏è</span>
                        <div>
                            <h3 className="text-sm font-medium text-red-800">–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</h3>
                            <p className="text-sm text-red-600 mt-1">{error}</p>
                        </div>
                    </div>
                </div>
            )}

            {/* ===== –ò–ù–î–ò–ö–ê–¢–û–† –ó–ê–ì–†–£–ó–ö–ò ===== */}
            {loading && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
                    <div className="flex items-center">
                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600 mr-3"></div>
                        <div>
                            <h3 className="text-sm font-medium text-blue-800">–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å—é...</h3>
                            <p className="text-sm text-blue-600 mt-1">
                                üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ‚Üí ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ò–ò ‚Üí üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç
                            </p>
                        </div>
                    </div>
                </div>
            )}

            {/* ===== –†–ï–ó–£–õ–¨–¢–ê–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò ===== */}
            {generateResult && (
                <div className="space-y-6">
                    {/* MARKDOWN –°–¢–ê–¢–¨–Ø */}
                    <div className="bg-white rounded-lg shadow-sm border">
                        <div className="border-b border-gray-200 px-6 py-4">
                            <h2 className="text-xl font-semibold text-gray-900">üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è</h2>
                            <p className="text-sm text-gray-600 mt-1">
                                –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ {generateResult.citations.length} –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
                            </p>
                        </div>
                        <div className="px-6 py-6">
                            {/* –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: Markdown —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ */}
                            <ReactMarkdown 
                                className="prose prose-lg max-w-none"
                                components={{
                                    // –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π –¥–ª—è Markdown —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                                    h1: ({children}) => <h1 className="text-2xl font-bold mb-4 text-gray-900">{children}</h1>,
                                    h2: ({children}) => <h2 className="text-xl font-semibold mb-3 mt-6 text-gray-800">{children}</h2>,
                                    h3: ({children}) => <h3 className="text-lg font-medium mb-2 mt-4 text-gray-700">{children}</h3>,
                                    p: ({children}) => <p className="mb-4 text-gray-700 leading-relaxed">{children}</p>,
                                    a: ({children, href}) => (
                                        <a href={href} className="text-blue-600 hover:text-blue-800 font-medium">
                                            {children}
                                        </a>
                                    ),
                                }}
                            >
                                {generateResult.draft}
                            </ReactMarkdown>
                        </div>
                    </div>

                    {/* –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø: –°–ü–ò–°–û–ö –ò–°–¢–û–ß–ù–ò–ö–û–í –ò –¶–ò–¢–ê–¢ */}
                    {generateResult.citations && generateResult.citations.length > 0 && (
                        <div className="bg-white rounded-lg shadow-sm border">
                            <div className="border-b border-gray-200 px-6 py-4">
                                <h3 className="text-lg font-semibold text-gray-900">üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Ü–∏—Ç–∞—Ç—ã</h3>
                                <p className="text-sm text-gray-600 mt-1">
                                    –í—Å–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω—ã —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
                                </p>
                            </div>
                            <div className="px-6 py-4">
                                <div className="space-y-4">
                                    {generateResult.citations.map((citation: Citation) => (
                                        <div key={citation.id} className="border-l-4 border-blue-200 pl-4">
                                            <div className="flex items-start justify-between">
                                                <div className="flex-1">
                                                    <div className="flex items-center gap-2 mb-1">
                                                        <span className="inline-flex items-center justify-center w-6 h-6 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
                                                            {citation.id}
                                                        </span>
                                                        <h4 className="font-medium text-gray-900">{citation.title}</h4>
                                                    </div>
                                                    <blockquote className="text-gray-700 italic text-sm">
                                                        "{citation.quote}"
                                                    </blockquote>
                                                    {citation.url && (
                                                        <a 
                                                            href={citation.url} 
                                                            className="text-blue-600 hover:text-blue-800 text-xs mt-1 inline-block"
                                                        >
                                                            üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É
                                                        </a>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    )}

                    {/* –ö–ù–û–ü–ö–ê –î–õ–Ø –ù–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò */}
                    <div className="text-center">
                        <button
                            onClick={() => {
                                setTopic("");
                                setGenerateResult(null);
                                setError(null);
                            }}
                            className="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-medium transition-colors"
                        >
                            ‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
}